diff --git a/Cargo.toml b/Cargo.toml
index 95253e3..bd03e34 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -19,6 +19,7 @@ appveyor = { repository = "jugglerchris/rust-html2text", service = "github" }
 clippy = { version = "0.0.302", optional=true }
 html5ever = "0.24.0"
 html5ever-atoms = "0.3.0"
+libc = "0.2.0"
 unicode-width = "0.1.5"
 backtrace = "0.3"
 
@@ -26,6 +27,10 @@ backtrace = "0.3"
 html_trace = []
 default = []
 
+[lib]
+name = "html2text"
+crate-type = ["dylib"]
+
 [[example]]
 name = "html2term"
 path = "examples/html2term.rs"
diff --git a/src/lib.rs b/src/lib.rs
index 5425340..6847a4f 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -53,6 +53,7 @@
 
 extern crate html5ever_atoms;
 #[macro_use] extern crate html5ever;
+extern crate libc;
 extern crate unicode_width;
 
 #[macro_use]
@@ -75,6 +76,7 @@ use html5ever::driver::ParseOpts;
 use html5ever::tree_builder::TreeBuilderOpts;
 use html5ever::rcdom::{self,RcDom,Handle,NodeData::{Text,Element,Document,Comment}};
 use html5ever::tendril::TendrilSink;
+use std::ffi::{CStr, CString};
 
 /// A dummy writer which does nothing
 struct Discard {}
@@ -1176,6 +1178,23 @@ pub fn from_read_with_decorator<R, D>
     builder.into_string()
 }
 
+/// Reads HTML from `input`, and returns a `String` with text wrapped to
+/// `width` columns. Available from the C FFI.
+#[no_mangle]
+pub extern "C" fn from_cstring(input: *const c_char, width: usize) -> *const c_char {
+    let c_str = unsafe {
+        assert!(!input.is_null());
+        CStr::from_ptr(input)
+    };
+
+    let r_str = c_str.to_str().unwrap();
+    let result = from_read(r_str.as_bytes(), width);
+    let s = CString::new(result).unwrap();
+    let p = s.as_ptr();
+    std::mem::forget(s);
+    p
+}
+
 /// Reads HTML from `input`, and returns a `String` with text wrapped to
 /// `width` columns.
 pub fn from_read<R>(input: R, width: usize) -> String where R: io::Read {
